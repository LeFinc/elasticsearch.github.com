---
layout: guide
title: Java Query DSL - Filters
cat: guide
sidebar: reference_java_api
---

p. elasticsearch provides a full Java query dsl in a similar manner to the REST "Query DSL":/guide/reference/query-dsl/. The factory for filter builders is @FilterBuilders@.

Once your query is ready, you can use the "Search API":/guide/reference/java-api/search.html.

p. See also how to build "Queries":/guide/reference/java-api/query-dsl-queries.html

p. To use @FilterBuilders@ just import them in your class:

<pre class="prettyprint lang-java">
import org.elasticsearch.index.query.FilterBuilders.*;
</pre>

p. Note that you can easily print (aka debug) JSON generated queries using @toString()@ method on @FilterBuilder@ object.

h1. And Filter

p. See "And Filter":/guide/reference/query-dsl/and-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.andFilter(
    FilterBuilders.rangeFilter("postDate").from("2010-03-01").to("2010-04-01"),
    FilterBuilders.prefixFilter("name.second", "ba")
    );
</pre>

p. Note that you can cache the result using @AndFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Bool Filter

p. See "Bool Filter":/guide/reference/query-dsl/bool-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.boolFilter()
    .must(FilterBuilders.termFilter("tag", "wow"))
    .mustNot(FilterBuilders.rangeFilter("age").from("10").to("20"))
    .should(FilterBuilders.termFilter("tag", "sometag"))
    .should(FilterBuilders.termFilter("tag", "sometagtag"));
</pre>

p. Note that you can cache the result using @BoolFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Exists Filter

p. See "Exists Filter":/guide/reference/query-dsl/exists-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.existsFilter("user");
</pre>

h1. Ids Filter

p. See "Ids Filter":/guide/reference/query-dsl/ids-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.idsFilter("my_type", "type2").addIds("1", "4", "100");

// Type is optional
FilterBuilders.idsFilter().addIds("1", "4", "100");
</pre>

h1. Limit Filter

p. See "Limit Filter":/guide/reference/query-dsl/limit-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.limitFilter(100);
</pre>

h1. Type Filter

p. See "Type Filter":/guide/reference/query-dsl/type-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.typeFilter("my_type");
</pre>

h1. Geo Bounding Box Filter

p. See "Geo Bounding Box Filter":/guide/reference/query-dsl/geo-bounding-box-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.geoBoundingBoxFilter("pin.location")
    .topLeft(40.73, -74.1)
    .bottomRight(40.717, -73.99);
</pre>

p. Note that you can cache the result using @GeoBoundingBoxFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. GeoDistance Filter

p. See "Geo Distance Filter":/guide/reference/query-dsl/geo-distance-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.geoDistanceFilter("pin.location")
    .point(40, -70)
    .distance(200, DistanceUnit.KILOMETERS)
    .optimizeBbox("memory")                    // Can be also "indexed" or "none"
    .geoDistance(GeoDistance.ARC);            // Or GeoDistance.PLANE
</pre>

p. Note that you can cache the result using @GeoDistanceFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Geo Distance Range Filter

p. See "Geo Distance Range Filter":/guide/reference/query-dsl/geo-distance-range-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.geoDistanceRangeFilter("pin.location")
    .point(40, -70)
    .from("200km")
    .to("400km")
    .includeLower(true)
    .includeUpper(false)
    .optimizeBbox("memory")                    // Can be also "indexed" or "none"
    .geoDistance(GeoDistance.ARC);            // Or GeoDistance.PLANE
</pre>

p. Note that you can cache the result using @GeoDistanceRangeFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Geo Polygon Filter

p. See "Geo Polygon Filter":/guide/reference/query-dsl/geo-polygon-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.geoPolygonFilter("pin.location")
    .addPoint(40, -70)
    .addPoint(30, -80)
    .addPoint(20, -90);
</pre>

p. Note that you can cache the result using @GeoPolygonFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Geo Shape Filter

p. See "Geo Shape Filter":/guide/reference/query-dsl/geo-shape-filter.html documentation

p. Note: the @geo_shape@ type uses @Spatial4J@ and @JTS@, both of which are optional dependencies. Consequently you must add @Spatial4J@ and @JTS@ to your classpath in order to use this type:

<pre class="prettyprint lang-xml noescape">
<dependency>
    <groupId>com.spatial4j</groupId>
    <artifactId>spatial4j</artifactId>
    <version>0.3</version>
</dependency>

<dependency>
    <groupId>com.vividsolutions</groupId>
    <artifactId>jts</artifactId>
    <version>1.12</version>
    <exclusions>
        <exclusion>
            <groupId>xerces</groupId>
            <artifactId>xercesImpl</artifactId>
        </exclusion>
    </exclusions>
</dependency>
</pre>

<pre class="prettyprint lang-java">
// Import Spatial4J shapes
import com.spatial4j.core.context.SpatialContext;
import com.spatial4j.core.shape.Shape;
import com.spatial4j.core.shape.impl.RectangleImpl;

// Also import ShapeRelation
import org.elasticsearch.common.geo.ShapeRelation;
</pre>

<pre class="prettyprint lang-java">
// Shape within another
filter = FilterBuilders.geoShapeFilter("location",
    new RectangleImpl(0,10,0,10,SpatialContext.GEO))
    .relation(ShapeRelation.WITHIN);

// Intersect shapes
filter = FilterBuilders.geoShapeFilter("location",
    new PointImpl(0, 0, SpatialContext.GEO))
    .relation(ShapeRelation.INTERSECTS);

// Using pre-indexed shapes
filter = FilterBuilders.geoShapeFilter("location", "New Zealand", "countries")
    .relation(ShapeRelation.DISJOINT);
</pre>


h1. Has Child / Has Parent Filters

p. See:
* "Has Child Filter":/guide/reference/query-dsl/has-child-filter.html documentation
* "Has Parent Filter":/guide/reference/query-dsl/has-parent-filter.html documentation

<pre class="prettyprint lang-java">
// Has Child
QFilterBuilders.hasChildFilter("blog_tag",
    QueryBuilders.termQuery("tag", "something"));

// Has Parent
QFilterBuilders.hasParentFilter("blog",
    QueryBuilders.termQuery("tag", "something"));
</pre>

h1. Match All Filter

p. See "Match All Filter":/guide/reference/query-dsl/match-all-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.matchAllFilter();
</pre>

h1. Missing Filter

p. See "Missing Filter":/guide/reference/query-dsl/missing-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.missingFilter("user")
    .existence(true)
    .nullValue(true);
</pre>

h1. Not Filter

p. See "Not Filter":/guide/reference/query-dsl/not-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.notFilter(
    FilterBuilders.rangeFilter("price").from("1").to("2"));
</pre>

h1. Numeric Range Filter

p. See "Numeric Range Filter":/guide/reference/query-dsl/numeric-range-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.numericRangeFilter("age")
    .from(10)
    .to(20)
    .includeLower(true)
    .includeUpper(false);
</pre>

p. Note that you can cache the result using @NumericRangeFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Or Filter

p. See "Or Filter":/guide/reference/query-dsl/or-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.orFilter(
        FilterBuilders.termFilter("name.second", "banon"),
        FilterBuilders.termFilter("name.nick", "kimchy")
    );
</pre>

p. Note that you can cache the result using @OrFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Prefix Filter

p. See "Prefix Filter":/guide/reference/query-dsl/prefix-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.prefixFilter("user", "ki");
</pre>

p. Note that you can cache the result using @PrefixFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Query Filter

p. See "Query Filter":/guide/reference/query-dsl/query-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.queryFilter(
        QueryBuilders.queryString("this AND that OR thus")
    );
</pre>

p. Note that you can cache the result using @QueryFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Range Filter

p. See "Range Filter":/guide/reference/query-dsl/range-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.rangeFilter("age")
    .from("10")
    .to("20")
    .includeLower(true)
    .includeUpper(false);

// A simplified form using gte, gt, lt or lte
FilterBuilders.rangeFilter("age")
    .gte("10")
    .lt("20");
</pre>

p. Note that you can ask not to cache the result using @RangeFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Script Filter

p. See "Script Filter":/guide/reference/query-dsl/script-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilder filter = FilterBuilders.scriptFilter(
        "doc['age'].value > param1"
    ).addParam("param1", 10);
</pre>

p. Note that you can cache the result using @ScriptFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Term Filter

p. See "Term Filter":/guide/reference/query-dsl/term-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.termFilter("user", "kimchy");
</pre>

p. Note that you can ask not to cache the result using @TermFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Terms Filter

p. See "Terms Filter":/guide/reference/query-dsl/terms-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.termsFilter("user", "kimchy", "elasticsearch")
    .execution("plain");     // Optional, can be also "bool", "and" or "or"
                            // or "bool_nocache", "and_nocache" or "or_nocache"
</pre>

p. Note that you can ask not to cache the result using @TermsFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.

h1. Nested Filter

p. See "Nested Filter":/guide/reference/query-dsl/nested-filter.html documentation

<pre class="prettyprint lang-java">
FilterBuilders.nestedFilter("obj1",
    QueryBuilders.boolQuery()
        .must(QueryBuilders.matchQuery("obj1.name", "blue"))
        .must(QueryBuilders.rangeQuery("obj1.count").gt(5))
    );
</pre>

p. Note that you can ask not to cache the result using @NestedFilterBuilder#cache(boolean)@ method. See "Caching section":#caching.




<a name="caching"></a>

h1. Caching

p. By default, some filters are cached or not cached. You can have a fine tuning control using @cache(boolean)@ method when exists.
For example:

<pre class="prettyprint lang-java">
FilterBuilder filter = FilterBuilders.andFilter(
        FilterBuilders.rangeFilter("postDate").from("2010-03-01").to("2010-04-01"),
        FilterBuilders.prefixFilter("name.second", "ba")
        )
    .cache(true);
</pre>

